package main

import (
    "context"
    "log"
    "net"
    "os"
    "os/signal"
    "strings"
    "sync"
    "syscall"
    "flag"
)

type Server struct {
    addr        string
    listener    *net.TCPListener
    ctx         context.Context
    shutdown    context.CancelFunc
    wg          sync.WaitGroup
    ChClosed    chan struct{}
}

type Conn struct {
    svr         *Server
    conn        *net.TCPConn
    readCtx     context.Context
    errRead     context.CancelFunc
}

const (
    listenerCloseMatcher = "use of closed network connection"
)

func (c *Conn) handleConnection() {
    defer func() {
        c.conn.Close()
        c.svr.wg.Done()
    }()

    go handleRead()

    select {
    case <-c.readCtx.Done():
    case <-c.svr.ctx.Done():
    }
}

func handleRead(conn *net.TCPConn, errRead context.CancelFunc) {
    defer errRead()

    buf := make([]byte, 4*1024)

    for {
        n, err := conn.Read(buf)
        if err != nil {
            if ne, ok := err.(net.Error); ok {
                switch {
                case ne.Temporary():
                    continue
                }
            }
            log.Println("Read", err)
            return
        }

        n, err = conn.Write(buf[:n])
        if err != nil {
            log.Println("Write", err)
            return
        }
    }
}

func (s *Server) handleListener() {
    defer func() {
        s.listener.Close()
        close(s.chClosed)
    }()
    for {
        conn, err := s.listener.AcceptTCP()
        if err != nil {
            if ne, ok := err.(net.Error); ok {
                if ne.Temporary() {
                    log.Println("AcceptTCP", err)
                    continue
                }
            }
            if listenerCloseError(err) {
                select {
                case <-serverCtx.Done():
                    return
                default:
                    // fallthrough
                }
            }

            log.Println("AcceptTCP", err)
            return
        }

        wg.Add(1)
        go handleConnection(conn, s.ctx, &s.wg)
    }
}

func (s *Server) Listen() error {
    resolvedAddr, err := net.ResolveTCPAddr("tcp", s.addr)
    if err != nil {
        return err
    }

    l, err := net.ListenTCP("tcp", resolvedAddr)
    if err != nil {
        return err
    }
    s.listener = l

    go s.handleListener()
    return nil
}

func (s *Server) Shutdown() {
    select {
    case <-s.ctx.Done():
        // already shutdown
    default:
        s.shutdown()
        s.listener.Close()
    }
}

func listenerCloseError(err error) bool {
    return strings.Contains(err.Error(), listenerCloseMatcher)
}

func main() {
    listenAddr := flag.String("l", "localhost:30000", "listen address:port")
    flag.Parse()
    resolvedListenAddr, err := net.ResolveTCPAddr("tcp", *listenAddr)
    if err != nil {
        log.Println("ResolveTCPAddr:", err)
        return
    }

    l, err := net.ListenTCP("tcp", resolvedListenAddr)
    if err != nil {
        log.Println("ListenTCP", err)
        return
    }

    sigChan := make(chan os.Signal, 1)
    // Ignore all signals
    signal.Ignore()
    signal.Notify(sigChan, syscall.SIGINT)

    var wg sync.WaitGroup
    chClosed := make(chan struct{})

    serverCtx, shutdown := context.WithCancel(context.Background())

    go handleListener(l, serverCtx, &wg, chClosed)

    log.Println("Server Started")

    s := <-sigChan

    switch s {
    case syscall.SIGINT:
        log.Println("Server Shutdown...")
        shutdown()
        l.Close()

        wg.Wait()
        <-chClosed
        log.Println("Server Shutdown Completed")
    default:
        panic("unexpected signal has been received")
    }
}
